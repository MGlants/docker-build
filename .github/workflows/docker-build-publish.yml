name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGES: ''


jobs:
  build:

    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - uses: actions/toolkit@v2
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Determine changed directories
        run: |
          CHANGED_DIRS=$(git diff --name-only HEAD~1..HEAD | grep '/' | cut -d'/' -f1 | sort | uniq)
          echo "Changed directories: $CHANGED_DIRS"
          echo "::set-env name=IMAGES::$(echo "$CHANGED_DIRS" | tr '\n' ',' | sed 's/,$//')"
        shell: bash
        
      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@f3c664df7af409cb4873aa5068053ba9d61a57b6 #v2.6.0
        with:
          cosign-release: 'v1.13.1'

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ joinEach(', ', [env.REGISTRY, github.repository_owner], env.IMAGES) }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker images
        id: build-and-push
        run: |
          for dir in $(echo "${{ env.IMAGES }}" | tr ',' '\n'); do
            if [ -f "$dir/Dockerfile" ]; then
              image_name="${{ env.REGISTRY }}/${{ github.repository_owner }}/$dir"
              docker buildx build \
                --platform linux/amd64,linux/arm64 \
                --push \
                --tag "$image_name:${{ steps.meta.outputs.tags }}" \
                "$dir"
              docker run --rm \
                -e GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}" \
                -e IMAGE="$image_name:${{ steps.meta.outputs.tags }}" \
                docker/metadata-action:v4 \
                tag-images
            fi
          done
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
          DOCKER_BUILDKIT: 1


      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker images
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          for image in $(echo "${{ env.IMAGES }}" | tr ',' '\n'); do
            image_name="${{ env.REGISTRY }}/${{ github.repository_owner }}/$image:${{ steps.meta.outputs.tags }}"
            cosign sign $image_name@${{ steps.build-and-push.outputs.digest }}
          done
